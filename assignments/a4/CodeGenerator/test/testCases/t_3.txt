/***************************************************
 ***************************************************
 *
 * Testing declaration, including classdecl,
 * funcDecl and varDecl.
 *
 ***************************************************
 ***************************************************/

//--------------------------------------------------
//
// zero, single, or mutiple class inheritance
//
//--------------------------------------------------

class A {};
class B : A {};
class C : A, B {};

//--------------------------------------------------
//
// classDecl body contains only varDecl
//
//--------------------------------------------------

class D {
	integer a;
	float b;
	C c;
};

//--------------------------------------------------
//
// classDecl body contains only funcDecl
//
//--------------------------------------------------

class E {
	integer f1(C c);
	float f2(integer a);
	C f3(float b);
};

//--------------------------------------------------
//
// classDecl body contains both varDecl and funcDecl
//
//--------------------------------------------------

class E {
	integer a[1][2];
	float b[3][4];
	C c[5][6];
	integer f1(float b);
	float f2(C c);
	C f3(integer a);
};

/***************************************************
 ***************************************************
 *
 * Testing function defination, including funcDef,
 * funcHead and fParams
 *
 ***************************************************
 ***************************************************/

//--------------------------------------------------
//
// function head
//
//--------------------------------------------------

integer f1() {};
float A::f2() {};

//--------------------------------------------------
//
// fParams, arraySize, type, fParamsTail
//
//--------------------------------------------------

float f1(float a) {};
float f2(float a[1][2]) {};
float f3(float a, float b) {};
C f4(float a, float b[1][2], float c) {};
integer f4(integer a[1], float b[2]) {};

//--------------------------------------------------
//
// funcBody, assignStat, expr, relExpr
// arithExpr, indice, term, assignOp, factor, sign
//
//--------------------------------------------------

float f1() {
	C c;
	a = 1 * 2.3 + 4;
	a.b[4-1][2/3].f2().f3(3 == 2).f4(+3, -1).b[(! a())] = 1;
};

//--------------------------------------------------
//
// statement (without assignStat), statBlock
//
//--------------------------------------------------

float f1() {
	if(a[b] < c+1 / 8 || d && e) then {
		f = g;
	} else {};
	for (float i = 0; i < 3+2/c[1].f1; i = i + 1) {
		read(c[0]);
		for (int j = 0; j < 3; j = j + c[0]) write (a+b);;
	};
	return (0.0);
};

main {
    integer x;
    //x = 3.e;;
};