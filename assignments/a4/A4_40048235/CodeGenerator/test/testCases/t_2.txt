/***************************************************
 ***************************************************
 *
 * Testing integer.
 *
 ***************************************************
 ***************************************************/

//--------------------------------------------------
//
// State flow: 0 -> 5 -> 6
//
//--------------------------------------------------

0    // 0 + sp

0a   // 0 + l
00   // 0 + 0
01   // 0 + nz
0_   // 0 + _
0~   // 0 + unknown char
0<>  // 0 + operator
0,   // 0 + punctuation

//--------------------------------------------------
//
// State flow: 0 -> 3+ -> 4
//
//--------------------------------------------------

1 9     // nz + space
20 430  // nz + 0
25 39   // nz + nz
903450  // nz + combined

351a    // int + l
730_    // int + _
651%    // int + unknown char
572<    // int + operator
488:    // int + punctuation

/***************************************************
 ***************************************************
 *
 * Testing float.
 *
 ***************************************************
 **************************************************/

//--------------------------------------------------
//
// State flow: 0 -> [3+|5] -> 7 -> (8 <-> 9) -> 10
//
//--------------------------------------------------

0.0 70.0 5.0       // single fraction (sf) + sp
0.1 82.9 4.7       // single fraction (sf) + sp
1.02003 0.40567    // sf + d+ + sp

1.a                // state_7 + l
1.0                // state_7 + 0
1.1                // state_7 + nz
1._                // state_7 + _
1.@                // state_7 + unknown
1.>                // state_7 + operator
1.( 1..            // state_7 + punctuation

1.0a               // state_8 + l
1.00 1.000         // state_8 + 0+
1.01               // state_8 + nz
1.0_               // state_8 + _
1.0`               // state_8 + unknown
1.0<=              // state_8 + operator
1.0)               // state_8 + punctuation

1.2a 1.2e          // state_9 + l
1.20               // state_9 + 0
1.111              // state_9 + nz+
1.1_               // state_9 + _
1.1#               // state_9 + unknown
1.1>=              // state_9 + operator
1.1[               // state_9 + punctuation

//--------------------------------------------------
//
// State flow: 9 -> 11 [ -> 12 ] -> 13+ -> 14
//
//--------------------------------------------------

1.1e             // state_11 + sp
1.1ea            // state_11 + l
1.1e1            // state_11 + nz
1.1e_            // state_11 + _
1.1e^            // state_11 + unknown
1.1e::           // state_11 + operator
1.1e]            // state_11 + punctuation

1.1e+    1.1e-   // state_12 + sp
1.1e+a   1.1e-a  // state_12 + l
1.1e+1   1.1e-1  // state_12 + nz
1.1e+_   1.1e-_  // state_12 + _
1.1e+^   1.1e-^  // state_12 + unknown
1.1e+::  1.1e-+  // state_12 + operator
1.1e+]   1.1e-{  // state_12 + punctuation

1.1e1  1.1e+1    // state_13 + sp
1.1e1a 1.1e+1a   // state_13 + l
1.1e10 1.1e+10   // state_13 + 0
1.1e11 1.1e+19   // state_13 + nz
1.1e1@ 1.1e+1#   // state_13 + unknown
1.1e1- 1.1e+1*   // state_13 + operator
1.1e1} 1.1e+1}   // state_13 + punctuation

//--------------------------------------------------
//
// State flow: 9 -> 11 [ -> 12 ] -> 15
//
//--------------------------------------------------

1.1e0            // state_11 + 0
1.1e+0 1.1e-0    // state_12 + 0

/***************************************************
 ***************************************************
 *
 * Testing id, reserved words.
 *
 ***************************************************
 **************************************************/

//--------------------------------------------------
//
// State flow: 0 -> 1+ -> 2
//
//--------------------------------------------------

b f G Z       // l + sp
ak MN uV Op   // l + l
q0            // l + 0
h1 l9 c4      // l + nonezero
j_            // l + _
Idk_56_S23___ // l + combined

abc$          // id + unknown char
abc;          // id + operator
abc==         // id + punctuation

Main fLOaT    // id looks like reserved word
for return    // reserved word
ifthen        // reserved word+reserved word
handwrite     // id + reserved word
classroom     // rw + id

/***************************************************
 ***************************************************
 *
 * Testing operator.
 *
 ***************************************************
 **************************************************/

                // operator + sp
== <> < > <= >= // compare
= ::            // assign, scope resolution op
+ - * /         // simple math op
&& ||           // and or
!               // not

<>= <====  &&&& // combined operator

!a              // op + l
<0              // op + 0
*9              // p[ + nz
(_              // op + _
&&&             // op + unknown
+-              // op + op
=;              // op + punctuation

| |123          // special case
& &abc          // special case

/***************************************************
 ***************************************************
 *
 * Testing punctuation.
 *
 ***************************************************
 **************************************************/

; , . :  ( ) [ ] { } // punc + sp
;a                   // punc + l
,0                   // punc + 0
.9                   // punc + nz
:_                   // punc + _
)#                   // punc + unknown
}+                   // punc + operator
{]                   // punc + punctuation

/***************************************************
 ***************************************************
 *
 * Testing comments.
 *
 ***************************************************
 **************************************************/

// inline comments

/* block comments
 *
 */

/* nested block comment
    /*
     *
     */
*/

/* unending block comments
 * not end
 * still not end
 * ...