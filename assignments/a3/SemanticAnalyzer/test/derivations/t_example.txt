[prog]
[classDeclRpt, funcDefRpt, main, funcBody, ;]
[classDecl, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, id, parentDeclOpt, {, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, id, parentDeclOpt, {, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, parentDeclOpt, {, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, type, id, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, id, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, id, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, varDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, classDecl, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, id, parentDeclOpt, {, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, id, parentDeclOpt, {, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, parentDeclOpt, {, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, id, parentRpt, {, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, id, parentRpt, {, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, parentRpt, {, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, type, id, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, id, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, id, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, varDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, arraySize, arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, intNum, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, intNum, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], arraySize, arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, intNum, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, intNum, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], arraySize, arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, intNum, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, intNum, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], arraySize, arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, intNum, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, intNum, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], arraySize, arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, intNum, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, intNum, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], arraySize, arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, intNum, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, intNum, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], arraySize, arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, intNum, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, intNum, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, type, id, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, id, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, id, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, varDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, arraySizeRpt, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, nextVFDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, type, id, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, id, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, id, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, varOrFuncDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, funcDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, fParams, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, fParams, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, type, id, arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, id, arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, id, arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, arraySize, arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, intNum, ], arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, intNum, ], arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, type, id, funcDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, id, funcDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, id, funcDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, funcDecl, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, fParams, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, fParams, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, type, id, arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, id, arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, id, arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, arraySize, arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, intNum, ], arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, intNum, ], arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], arraySizeRpt, fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], fParamsTailRpt, ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, funcDeclRpt, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, classDeclRpt, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, funcDef, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, funcHead, funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, type, id, funcHeadND, funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, id, funcHeadND, funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, id, funcHeadND, funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, funcHeadND, funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, sr, id, (, fParams, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, id, (, fParams, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, fParams, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, fParams, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, type, id, arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, id, arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, id, arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, arraySize, arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, intNum, ], arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, intNum, ], arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, id, arraySizeRpt, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, id, arraySizeRpt, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, arraySizeRpt, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, id, arraySizeRpt, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, id, arraySizeRpt, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, arraySizeRpt, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, id, varDeclOrAssignStat, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, varDeclOrAssignStat, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, v1, assignOp, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, assignOp, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, arithExpr, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, term, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, varOrFunc, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, indice, indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, factor, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, intNum, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, statement, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, statementND, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, type, id, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, type, id, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, type, id, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, id, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, id, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, arithExpr, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, term, arithExprLR, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, factor, termLR, arithExprLR, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, intNum, termLR, arithExprLR, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, termLR, arithExprLR, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, arithExprLR, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, term, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, factor, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, varOrFunc, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, id, varOrFuncND, vF1, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, varOrFuncND, vF1, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, vF1, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, gt, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, term, arithExprLR, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, factor, termLR, arithExprLR, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, intNum, termLR, arithExprLR, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, termLR, arithExprLR, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, arithExprLR, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, variable, assignOp, expr, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, id, v1, assignOp, expr, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, v1, assignOp, expr, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, assignOp, expr, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, expr, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, expr, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, arithExpr, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, term, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, factor, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, varOrFunc, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, vF1, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, addOp, term, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, term, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, term, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, factor, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, intNum, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, statement, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, statementND, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, expr, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, expr, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, expr, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, arithExpr, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, term, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, factor, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, varOrFunc, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, indice, indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, factor, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, varOrFunc, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, id, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], relOp, arithExpr, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], gt, arithExpr, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, arithExpr, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, term, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, factor, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, varOrFunc, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, id, varOrFuncND, vF1, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, varOrFuncND, vF1, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, vF1, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, statement, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, assignStat, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, variable, assignOp, expr, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, id, v1, assignOp, expr, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, v1, assignOp, expr, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, assignOp, expr, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, expr, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, expr, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, arithExpr, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, term, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, varOrFunc, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, indice, indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, factor, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, varOrFunc, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, id, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, statementRpt, }, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, statementRpt, }, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, statement, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, statementND, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, expr, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, expr, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, expr, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, arithExpr, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, term, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, factor, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, varOrFunc, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, vF1, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, funcDef, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, funcHead, funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, type, id, funcHeadND, funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, id, funcHeadND, funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, id, funcHeadND, funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, funcHeadND, funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, sr, id, (, fParams, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, id, (, fParams, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, fParams, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, fParams, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, type, id, arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, id, arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, id, arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, arraySize, arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, intNum, ], arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, intNum, ], arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], arraySizeRpt, fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], fParamsTailRpt, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, id, arraySizeRpt, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, id, arraySizeRpt, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, arraySizeRpt, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, id, arraySizeRpt, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, id, arraySizeRpt, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, arraySizeRpt, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, id, varDeclOrAssignStat, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, varDeclOrAssignStat, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, v1, assignOp, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, assignOp, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, arithExpr, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, term, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, varOrFunc, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, indice, indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, factor, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, intNum, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, statement, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, statementND, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, type, id, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, type, id, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, type, id, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, id, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, id, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, arithExpr, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, term, arithExprLR, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, factor, termLR, arithExprLR, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, intNum, termLR, arithExprLR, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, termLR, arithExprLR, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, arithExprLR, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, term, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, factor, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, varOrFunc, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, id, varOrFuncND, vF1, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, varOrFuncND, vF1, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, vF1, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, leq, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, term, arithExprLR, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, factor, termLR, arithExprLR, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, intNum, termLR, arithExprLR, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, termLR, arithExprLR, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, arithExprLR, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, assignStat, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, variable, assignOp, expr, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, id, v1, assignOp, expr, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, v1, assignOp, expr, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, assignOp, expr, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, expr, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, expr, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, arithExpr, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, term, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, factor, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, arithExpr, ), termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, arithExpr, ), termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, term, arithExprLR, ), termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, factor, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, varOrFunc, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, id, varOrFuncND, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, varOrFuncND, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, arithExprLR, ), termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), addOp, term, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, term, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, term, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, factor, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, intNum, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, exprND, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), statBlock, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, statement, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, statementND, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, expr, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, expr, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, expr, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, arithExpr, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, term, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, factor, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, varOrFunc, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, indice, indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, factor, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, varOrFunc, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, id, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], vF1, termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], termLR, arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], arithExprLR, exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], exprND, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], relOp, arithExpr, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], lt, arithExpr, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, arithExpr, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, term, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, factor, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, varOrFunc, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, id, varOrFuncND, vF1, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, varOrFuncND, vF1, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, vF1, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, addOp, term, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, term, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, term, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, factor, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, intNum, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, multOp, factor, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, factor, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, factor, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, intNum, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, addOp, term, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, or, term, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, term, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, factor, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, varOrFunc, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, id, varOrFuncND, vF1, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, varOrFuncND, vF1, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, vF1, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, termLR, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, arithExprLR, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, statBlock, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, statement, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, assignStat, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, variable, assignOp, expr, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, id, v1, assignOp, expr, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, v1, assignOp, expr, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, assignOp, expr, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, expr, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, expr, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, arithExpr, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, term, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, varOrFunc, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, indice, indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, factor, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, varOrFunc, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, id, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], indiceRpt, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], termLR, arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], arithExprLR, exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], exprND, ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, statementRpt, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, statBlock, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, statementRpt, }, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, statementRpt, }, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, statementRpt, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, statement, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, statementND, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, expr, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, expr, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, expr, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, arithExpr, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, term, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, factor, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, varOrFunc, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, vF1, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, funcDef, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, funcHead, funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, type, id, funcHeadND, funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, id, funcHeadND, funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, id, funcHeadND, funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, funcHeadND, funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, fParams, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, fParams, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), funcBody, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, id, arraySizeRpt, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, id, arraySizeRpt, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, arraySizeRpt, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, nextVDS, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, id, varDeclOrAssignStat, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, varDeclOrAssignStat, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, v1, assignOp, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, assignOp, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, arithExpr, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, term, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, intNum, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, multOp, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, arithExpr, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, arithExpr, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, term, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, factor, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, intNum, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, addOp, term, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, term, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, term, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, factor, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, floatNum, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, multOp, factor, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, factor, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, factor, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, floatNum, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, statement, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, assignStat, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, variable, assignOp, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, id, v1, assignOp, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, v1, assignOp, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, assignOp, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, expr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, arithExpr, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, term, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, floatNum, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, addOp, term, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, term, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, term, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, arithExpr, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, arithExpr, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, term, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, factor, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, arithExpr, ), termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, arithExpr, ), termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, term, arithExprLR, ), termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, factor, termLR, arithExprLR, ), termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, floatNum, termLR, arithExprLR, ), termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, termLR, arithExprLR, ), termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, multOp, factor, termLR, arithExprLR, ), termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, factor, termLR, arithExprLR, ), termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, factor, termLR, arithExprLR, ), termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, floatNum, termLR, arithExprLR, ), termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, termLR, arithExprLR, ), termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, arithExprLR, ), termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), addOp, term, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, term, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, term, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, factor, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, floatNum, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), addOp, term, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, term, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, term, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, floatNum, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, arithExprLR, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, exprND, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, relOp, arithExpr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, gt, arithExpr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, arithExpr, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, term, arithExprLR, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, factor, termLR, arithExprLR, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, intNum, termLR, arithExprLR, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, termLR, arithExprLR, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, multOp, factor, termLR, arithExprLR, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, and, factor, termLR, arithExprLR, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, factor, termLR, arithExprLR, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, not, factor, termLR, arithExprLR, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, factor, termLR, arithExprLR, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, sign, factor, termLR, arithExprLR, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, factor, termLR, arithExprLR, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, factor, termLR, arithExprLR, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, intNum, termLR, arithExprLR, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, termLR, arithExprLR, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, arithExprLR, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, statement, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, statementND, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, expr, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, expr, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, expr, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, arithExpr, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, term, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, factor, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, varOrFunc, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, vF1, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, arithExprLR, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, exprND, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, statementRpt, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, funcDefRpt, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, funcBody, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, id, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, id, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, arraySize, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, intNum, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, intNum, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, id, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, id, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, id, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, id, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, id, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, id, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, id, varDeclOrAssignStat, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, varDeclOrAssignStat, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, id, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, id, varDeclOrAssignStat, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, varDeclOrAssignStat, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, id, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, arraySize, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, intNum, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, intNum, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], arraySize, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, intNum, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, intNum, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], arraySize, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, intNum, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, intNum, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], arraySize, arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, intNum, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, intNum, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], arraySizeRpt, ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, nextVDS, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, statementND, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, type, id, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, type, id, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, type, id, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, id, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, id, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, assignOp, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, expr, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, arithExpr, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, term, arithExprLR, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, factor, termLR, arithExprLR, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, intNum, termLR, arithExprLR, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, termLR, arithExprLR, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, arithExprLR, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, exprND, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, arithExpr, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, term, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, factor, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, varOrFunc, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, id, varOrFuncND, vF1, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, varOrFuncND, vF1, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, vF1, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, termLR, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, arithExprLR, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, relOp, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, leq, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, arithExpr, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, term, arithExprLR, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, factor, termLR, arithExprLR, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, intNum, termLR, arithExprLR, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, termLR, arithExprLR, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, arithExprLR, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, assignStat, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, variable, assignOp, expr, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, id, v1, assignOp, expr, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, v1, assignOp, expr, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, assignOp, expr, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, expr, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, expr, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, arithExpr, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, term, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, factor, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, varOrFunc, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, vF1, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, addOp, term, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, term, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, term, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, factor, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, intNum, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, termLR, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, arithExprLR, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, exprND, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), statBlock, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, statement, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, statementND, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, variable, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, variable, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, variable, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, id, v1, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, v1, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, indiceRpt, v2, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, indice, indiceRpt, v2, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, arithExpr, ], indiceRpt, v2, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, arithExpr, ], indiceRpt, v2, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, term, arithExprLR, ], indiceRpt, v2, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, factor, termLR, arithExprLR, ], indiceRpt, v2, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, varOrFunc, termLR, arithExprLR, ], indiceRpt, v2, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, id, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, v2, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, v2, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, vF1, termLR, arithExprLR, ], indiceRpt, v2, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, termLR, arithExprLR, ], indiceRpt, v2, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, arithExprLR, ], indiceRpt, v2, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], indiceRpt, v2, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], indiceRpt, v2, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], v2, ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, statement, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, assignStat, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, variable, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, id, v1, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, v1, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, indice, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, term, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, factor, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, varOrFunc, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, id, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], v2, assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], assignOp, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, expr, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, arithExpr, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, term, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, arithExpr, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, arithExpr, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, term, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, factor, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, varOrFunc, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, id, varOrFuncND, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, varOrFuncND, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, indiceRpt, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, indice, indiceRpt, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, factor, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, varOrFunc, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, id, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], indiceRpt, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], indiceRpt, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], multOp, factor, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, factor, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, factor, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, varOrFunc, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, id, varOrFuncND, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, varOrFuncND, vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, aParams, ), vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, aParams, ), vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), vF1, termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), termLR, arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), arithExprLR, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), arithExprLR, exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), exprND, ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, statementRpt, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, statement, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, assignStat, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, variable, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, id, v1, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, v1, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, arithExpr, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, term, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, varOrFunc, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, aParams, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, aParams, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, expr, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, arithExpr, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, term, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, factor, termLR, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, varOrFunc, termLR, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, varOrFuncND, vF1, termLR, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, vF1, termLR, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, termLR, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, statement, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, assignStat, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, variable, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, id, v1, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, v1, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, arithExpr, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, term, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, varOrFunc, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, varOrFuncND, vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, aParams, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, aParams, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, expr, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, arithExpr, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, term, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, factor, termLR, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, varOrFunc, termLR, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, varOrFuncND, vF1, termLR, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, vF1, termLR, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, termLR, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, arithExprLR, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, exprND, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, aParamsTailRpt, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), vF1, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, statement, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, assignStat, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, variable, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, id, v1, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, v1, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., id, v1, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., id, v1, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, v1, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, indice, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, term, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, factor, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, intNum, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], indice, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, term, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, factor, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, intNum, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], indice, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, term, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, factor, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, intNum, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], indice, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, term, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, factor, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, intNum, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], indice, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, term, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, factor, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, intNum, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], indice, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, term, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, factor, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, intNum, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], indice, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, term, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, factor, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, intNum, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, arithExpr, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, term, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, intNum, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, statement, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, assignStat, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, variable, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, id, v1, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, v1, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, indice, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, term, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, factor, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, varOrFunc, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, id, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., id, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., id, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, indice, indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, factor, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, intNum, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], indice, indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, factor, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, intNum, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], indice, indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, factor, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, intNum, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], indice, indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, factor, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, intNum, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], indice, indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, factor, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, intNum, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], indice, indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, factor, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, intNum, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], indice, indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, arithExpr, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, factor, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, varOrFunc, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, id, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, addOp, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, term, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, factor, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, varOrFunc, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, id, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, varOrFuncND, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, vF1, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, termLR, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, arithExprLR, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], indiceRpt, vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], vF1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], indice, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, term, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, factor, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, intNum, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], indice, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, term, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, factor, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, intNum, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], indice, indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, arithExpr, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, term, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, factor, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, intNum, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, termLR, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, arithExprLR, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], indiceRpt, v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], v2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., id, v1, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., id, v1, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, v1, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, assignOp, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, expr, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, arithExpr, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, term, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, factor, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, floatNum, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, termLR, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, arithExprLR, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, exprND, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, statement, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, statementND, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, expr, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, expr, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, expr, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, arithExpr, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, term, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, factor, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, varOrFunc, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, vF1, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, statement, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, statementND, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, expr, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, expr, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, expr, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, arithExpr, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, term, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, factor, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, varOrFunc, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, id, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, minValue, varOrFuncND, vF1, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, minValue, vF1, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, minValue, termLR, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, minValue, arithExprLR, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, minValue, exprND, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, minValue, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, minValue, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, minValue, ), ;, statementRpt, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, minValue, ), ;, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, minValue, ), ;, }, ;]
[class, InheritedUtility, {, integer, member1, ;, }, ;, class, Utility, :, InheritedUtility, {, integer, var1, [, 4, ], [, 5, ], [, 7, ], [, 8, ], [, 9, ], [, 1, ], [, 0, ], ;, float, var2, ;, integer, findMax, (, integer, array, [, 100, ], ), ;, integer, findMin, (, integer, array, [, 100, ], ), ;, }, ;, integer, Utility, ::, findMax, (, integer, array, [, 100, ], ), {, integer, maxValue, ;, integer, idx, ;, maxValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 99, ;, idx, >, 0, ;, idx, =, idx, -, 1, ), {, if, (, array, [, idx, ], >, maxValue, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, maxValue, ), ;, }, ;, integer, Utility, ::, findMin, (, integer, array, [, 100, ], ), {, integer, minValue, ;, integer, idx, ;, minValue, =, array, [, 100, ], ;, for, (, integer, idx, =, 1, ;, idx, <=, 99, ;, idx, =, (, idx, ), +, 1, ), {, if, (, array, [, idx, ], <, maxValue, +, 1, /, 8, ||, idx, ), then, {, maxValue, =, array, [, idx, ], ;, }, else, {, }, ;, }, ;, return, (, minValue, ), ;, }, ;, float, randomize, (, ), {, float, value, ;, value, =, 100, *, (, 2, +, 3.0, /, 7.0006, ), ;, value, =, 1.05, +, (, (, 2.04, *, 2.47, ), -, 3.0, ), +, 7.0006, >, 1, &&, !, -, 1, ;, return, (, value, ), ;, }, ;, main, {, integer, sample, [, 100, ], ;, integer, idx, ;, integer, maxValue, ;, integer, minValue, ;, Utility, utility, ;, Utility, arrayUtility, [, 2, ], [, 3, ], [, 6, ], [, 7, ], ;, for, (, integer, t, =, 0, ;, t, <=, 100, ;, t, =, t, +, 1, ), {, read, (, sample, [, t, ], ), ;, sample, [, t, ], =, (, sample, [, t, ], *, randomize, (, ), ), ;, }, ;, maxValue, =, utility, ., findMax, (, sample, ), ;, minValue, =, utility, ., findMin, (, sample, ), ;, utility, ., var1, [, 4, ], [, 1, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], [, 0, ], =, 10, ;, arrayUtility, [, utility, ., var1, [, 1, ], [, 2, ], [, 3, ], [, 4, ], [, 5, ], [, 6, ], [, idx, +, maxValue, ], ], [, 1, ], [, 1, ], [, 1, ], ., var2, =, 2.5, ;, write, (, maxValue, ), ;, write, (, minValue, ), ;, }, ;]
