/* * This test file focus on detecting errors * during semantic/type checking phase. * Error type: * 		1) undefined member variable *		2) undefined member function *		3) undefined free function *		4) undefined class * *		5) invalid "." operater usage *		6) invalid returnStat in main *		7) invalid array index type *		8) invalid array dimension size * *		9) unmatched variable dimensions *		10) unmatched return type *		11) unmatched assignStat/addOp/multOp/relExpr type *		12) unmatched function call parameter * *		13) missing returnStat *		 *		14) circular class dependencies*/class A {	A       a_A;	float   v1_A;	integer f1_A(integer x);};class B : A {	integer v1_B;	I i_B;						// undefined class};class C : D {};					// circular class dependenciesclass D : C {};					// circular class dependenciesclass E : F {};					// circular class dependenciesclass F {	E e;						// circular class dependencies};class G {	H h;						// circular class dependencies};class H : G {};					// circular class dependenciesinteger A::f1_A(integer x) {	integer v1_f1_A;	return (1);};integer f1(integer x, float y) {	return (1);};float f2() {};					// missing returnStatfloat f3() {	return (1);					// unmatched return type};main {	A a;	B b;	K k;						// undefined class	integer x;	float   y;	integer array[1][2][3];	if (1 == 2) then {		a.v1_A = 1.0;		a.a_A = a;		a.a_A.a_A = b;			// unmatched assignStat type		a.a_A.umv_1 = 1;		// undefined member variable		a.f1_A(x).v1_f1_A = 3;		a.f1_A(x).v1_f1_A = 3.0;// unmatched assignStat type		a.v1_A.umv_2 = 1;		// invalid .umv_2, v1_A is not a class type	} else {};		x = f1(array[1][2][3], y);	x = f1(x);					// unmatched function call parameter	x = a.f1_A(x);	x = a.f1_A(x, y);			// unmatched function call parameter	y = f1(x, y);				// unmatched assignStat type	x = f4(x, y);				// undefined free function			write(1.0 && f1(x, y));		// unmatched multOp type		x = array[1][2][3];	x = array[a][2.0];			// invalid array index								// invalid array index								// unmatched variable dimension	array[1][a] = x;			// invalid array index								// unmatched variable dimension		return (a);					// invalid returnStat};